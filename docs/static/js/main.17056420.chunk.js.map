{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAkCeA,EA/BK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACPC,mBAAS,cADF,mBACpCC,EADoC,KACxBC,EADwB,KAgB3C,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBoB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCWLO,EATK,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAC7B,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCqBIO,EAvBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAgB1C,OAVAC,qBAAW,WACTxB,EAASC,GACNwB,MAAM,SAAAC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAAEpB,IAEEqB,EDd0BK,CAAc1B,GAAlCa,EADmB,EACxBN,KAAaa,EADW,EACXA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEUTgB,EAvBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,cADrB,mBAClB0C,EADkB,KACN3C,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCZpB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.17056420.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ( { setCategories } ) => {\n  const [inputValue, setInputValue] = useState('Hola mundo');\n\n  const handleInputChange = (e) => {\n    setInputValue( e.target.value );\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2 ) {\n      setCategories( cats => [inputValue, ...cats] );\n      setInputValue('');\n    }\n  }\n  \n  return (\n    <form onSubmit={ handleSubmit }>\n      <input \n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","export const getGifs = async( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=JAV02qV4lbtsmNmzwiyZOh8MpxB6md9C`\n  \n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react';\n\nconst GifGridItem = ( { title, url } ) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  )\n};\n\nexport default GifGridItem;","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data:images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n      { loading && <p className=\"animate__animated animate__fadeIn\">Loading</p> }\n\n      <div className=\"card-grid\">\n        {\n          images.map( img => (\n            <GifGridItem\n              key={ img.id }\n              { ...img }\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\nexport default GifGrid;","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    getGifs( category )\n      .then( imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        });\n      });\n  }, [ category ]);\n\n  return state; // { data: [], loading: true };\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n\n      <ol>\n        {\n          categories.map( category => (\n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}